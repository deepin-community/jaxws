/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 1997-2017 Oracle and/or its affiliates. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://oss.oracle.com/licenses/CDDL+GPL-1.1
 * or LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

// test with no handler first
int orig = 1;
final IntHolder intHolder = new IntHolder();

Future response = helloPort.hello0Async(orig,
    new AsyncHandler() {
        public void handleResponse(Response resp) {
            try {
                // add 10 to make sure this was called
                intHolder.setValue(((Integer)resp.get())+10);
            } catch (Exception e) {
                e.printStackTrace();
                intHolder.setValue(-100); // will cause failure
            }
        }
});

// wait, but only up to 15 seconds. if it takes more,
// it's considered a hangup
response.get(15,TimeUnit.SECONDS);

assertEquals("did not get expected value back in response",
    orig + 10, intHolder.getValue());

// add handler
addHandler(new SOAPTestHandler(), helloPort);
int diff = 2; // 1 per handler invocation

response = helloPort.hello0Async(orig,
    new AsyncHandler() {
    public void handleResponse(Response resp) {
        try {
            intHolder.setValue(((Integer) resp.get()).intValue());
        } catch (Exception e) {
            e.printStackTrace();
            intHolder.setValue(-100); // will cause failure
        }
    }
});

response.get(15,TimeUnit.SECONDS);

assertEquals("handlers did not execute successfully",
    orig + diff, intHolder.getValue());
