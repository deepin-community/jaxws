<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2017 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://oss.oracle.com/licenses/CDDL+GPL-1.1
    or LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<descriptor since="2.0">
    <description>Randon fromwsdl tests</description>
    <service basedir="./server">
        <wsdl href="hello_literal.wsdl"/>
    </service>
    <client name="fromwsdl.doclit1">
        <description>
            Test hello().
        </description>
        String arg = "foo";
        String extra = "bar";
        Hello_Type req = new Hello_Type();
        req.setArgument(arg);
        req.setExtra(extra);
        HelloResponse response = helloPort.hello(req);
        assertEquals(arg, response.getArgument());
        assertEquals(extra, response.getExtra());
    </client>
    <client name="fromwsdl.doclit2">
        <description>
            Test Keywords.
        </description>
        String resp = helloPort.testKeyword("Hello");
        assertEquals(resp, "Hello World!");
    </client>

    <client name="fromwsdl.doclit3">
        <description>
            Test method with void.
        </description>
        VoidType req = new VoidType();
        VoidType response = helloPort.voidTest(req);
        assertNotNull(response);
    </client>

    <client name="fromwsdl.doclit4">
        <description>
            Test echoArray()
        </description>
        String[] in = new String[]{"JAXRPC 1.0", "JAXRPC 1.1", "JAXRPC 1.1.2", "JAXRPC 2.0"};

        NameType nt = new NameType();
        nt.getName().add(in[0]);
        nt.getName().add(in[1]);
        nt.getName().add(in[2]);
        nt.getName().add(in[3]);
        Holder req = new javax.xml.ws.Holder(nt);
        helloPort.echoArray(req);
        assertNull(req.value);
    </client>

    <client name="fromwsdl.doclit5">
        <description>
            Test echoArray1()
        </description>
        String[] in = new String[]{"JAXRPC 1.0", "JAXRPC 1.1", "JAXRPC 1.1.2", "JAXRPC 2.0", "EA"};

        NameType nt = new NameType();
        nt.getName().add(in[0]);
        nt.getName().add(in[1]);
        nt.getName().add(in[2]);
        nt.getName().add(in[3]);
        Holder req = new javax.xml.ws.Holder(nt);
        helloPort.echoArray1(req);
        assertTrue(Arrays.equals(in, ((NameType)req.value).getName().toArray()));
    </client>

    <client name="fromwsdl.doclit6">
        <description>
            Test echoArray2().
        </description>
        Holder req = new javax.xml.ws.Holder();
        helloPort.echoArray2(req);
        assertNull(req.value);
    </client>

    <client name="fromwsdl.doclit7">
        <description>
            Test echoArray3()
        </description>
        List in = new ArrayList();
        in.add("JAXRPC 1.0");
        in.add("JAXRPC 1.1");
        in.add("JAXRPC 1.1.2");
        in.add("JAXRPC 2.0");
        Holder req = new javax.xml.ws.Holder(in);
        helloPort.echoArray3(req);
        assertEquals(in, req.value);
    </client>

    <client name="fromwsdl.doclit8">
        <description>
            Test echoArray4().
        </description>
        NameType1 resp = helloPort.echoArray4(new NameType1());
        assertEquals(((HelloType)resp.getName().get(0)).getArgument(), "arg1");
        assertEquals(((HelloType)resp.getName().get(0)).getExtra(), "extra1");
        assertEquals(((HelloType)resp.getName().get(1)).getArgument(), "arg2");
        assertEquals(((HelloType)resp.getName().get(1)).getExtra(), "extra2");
    </client>

    <client name="fromwsdl.doclit9">
        <description>
            Test MU
        </description>
        String next_1_1 = "http://schemas.xmlsoap.org/soap/actor/next";

        ((BindingProvider) helloPort).getBinding().setHandlerChain(new ArrayList());
        MUHelperHandler handler = new MUHelperHandler();

        List handlers = ((BindingProvider) helloPort).getBinding().getHandlerChain();
        handlers.add(handler);
        ((BindingProvider) helloPort).getBinding().setHandlerChain(handlers);

        // have handler set header that is ignored
        handler.setMUHeader(new QName("urn:mutest", "someheader"),
            "notarealactor");

        // make the call
        String arg = "foo";
        Hello_Type req = new Hello_Type();
        req.setArgument(arg);
        HelloResponse response = helloPort.hello(req);
        assertEquals(arg, response.getArgument());

        // add header that should result in soap fault
        handler.setMUHeader(new QName("urn:mutest", "someheader"), next_1_1);

        // make the call
        try {
            response = helloPort.hello(req);
            fail("did not receive any exception");
        } catch (javax.xml.ws.ProtocolException e) {
            if (e instanceof SOAPFaultException) {
                // pass
            } else {
                fail("did not receive soap fault, received: " +
                    e.toString());
            }
        } catch (Exception e) {
            fail("did not receive protocol exception. received " +
                e.toString());
        }
    </client>

    <client name="fromwsdl.echoAnyType">
        <description>
            Test echoAnyType
        </description>
        <![CDATA[
        //import javax.xml.namespace.QName;
        
        String str = "\u0938\u094D\u0935\u093E\u0917\u0924";
        assertEquals(str, (String)helloPort.echoAnyType(str));

        QName qname = new QName("http://example.org/","local");
        assertEquals(qname, (QName) helloPort.echoAnyType(qname));

        short sh =255;
        assertEquals((Short)sh,(Short) helloPort.echoAnyType(sh));
        ]]>
    </client>

</descriptor>
